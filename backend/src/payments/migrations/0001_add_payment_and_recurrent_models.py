# Generated by Django 4.2.21 on 2025-07-25 17:01

from decimal import Decimal
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('products', '0013_add_lifetime_to_product'),
    ]

    operations = [
        migrations.CreateModel(
            name='Recurrent',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('ACTIVE', 'Active'), ('CANCELLED', 'Cancelled')], db_index=True, default='ACTIVE', max_length=16, verbose_name='Status')),
                ('charge_token', models.CharField(db_index=True, help_text='Unique token for recurring charge from payment provider.', max_length=256, verbose_name='Charge token')),
                ('charge_method', models.CharField(choices=[('CARD', 'Bank card'), ('CARD_RECURRENT', 'Bank card (recurrent)'), ('SBP', 'SBP (Fast Payments)'), ('SBP_RECURRENT', 'SBP (Fast Payments, recurrent)'), ('APPLE_PAY', 'Apple Pay'), ('GOOGLE_PAY', 'Google Pay')], db_index=True, max_length=16, verbose_name='Charge method')),
                ('provider', models.CharField(choices=[('DOLYAME', 'Dolyame'), ('SPLIT', 'Split'), ('STRIPE', 'Stripe'), ('TINKOFF', 'Tinkoff'), ('APPLE_PAY', 'Apple Pay'), ('GOOGLE_PAY', 'Google Pay')], db_index=True, help_text='Provider: Tinkoff, Stripe, Dolyame, etc.', max_length=16, verbose_name='Provider')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Planned recurring charge amount.', max_digits=10, verbose_name='Recurring charge amount')),
                ('next_charge_date', models.DateTimeField(blank=True, db_index=True, help_text='Planned date for next recurring charge.', null=True, verbose_name='Next charge date')),
                ('last_attempt_charge_date', models.DateTimeField(blank=True, null=True, verbose_name='Last attempt charge date')),
                ('last_attempt_charge_status', models.CharField(blank=True, choices=[('SUCCESS', 'Success'), ('FAIL', 'Fail')], db_index=True, default='', max_length=8, verbose_name='Last attempt charge status')),
                ('attempts_charge', models.JSONField(blank=True, help_text='History of charge attempts (date, status, error, etc).', null=True, verbose_name='Charge attempts')),
                ('product', models.ForeignKey(help_text='Product for which the recurring subscription is enabled.', on_delete=django.db.models.deletion.PROTECT, related_name='recurrent_subscriptions', to='products.product', verbose_name='Product')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='recurrent_subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Recurrent payment',
                'verbose_name_plural': 'Recurrent payments',
                'ordering': ['-created'],
                'permissions': [('allow_recurrent_integration', 'Can send requests for recurrent integration')],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('created', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('modified', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('external_payment_id', models.CharField(db_index=True, help_text='Payment ID in external payment system (or payment id from shop).', max_length=128, unique=True, verbose_name='External payment ID')),
                ('order_id', models.CharField(db_index=True, help_text='Unique identifier for the order associated with this payment in the shop system.', max_length=128, verbose_name='Order ID')),
                ('source', models.CharField(choices=[('SITE', 'Site (shop)'), ('ADMIN', 'Shop admin panel'), ('LMS', 'LMS (internal)'), ('APPLE', 'Apple'), ('GOOGLE', 'Google'), ('RECURRING', 'Recurring (auto-charge)')], db_index=True, default='SITE', help_text='Source of payment creation (site, admin, lms, apple, google, recurring).', max_length=24, verbose_name='Source')),
                ('provider', models.CharField(choices=[('DOLYAME', 'Dolyame'), ('SPLIT', 'Split'), ('STRIPE', 'Stripe'), ('TINKOFF', 'Tinkoff'), ('APPLE_PAY', 'Apple Pay'), ('GOOGLE_PAY', 'Google Pay')], db_index=True, help_text='Payment provider (Tinkoff, Stripe, Dolyame, etc.).', max_length=16, verbose_name='Provider')),
                ('payment_method', models.CharField(choices=[('CARD', 'Bank card'), ('CARD_RECURRENT', 'Bank card (recurrent)'), ('SBP', 'SBP (Fast Payments)'), ('SBP_RECURRENT', 'SBP (Fast Payments, recurrent)'), ('APPLE_PAY', 'Apple Pay'), ('GOOGLE_PAY', 'Google Pay')], db_index=True, default='CARD', help_text='How user paid (card, Apple Pay, etc.).', max_length=24, verbose_name='Payment method')),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('PAID', 'Paid'), ('CANCELLED', 'Cancelled'), ('REFUNDED', 'Refunded'), ('FAILED', 'Failed')], db_index=True, default='PENDING', help_text='Current status of the payment.', max_length=16, verbose_name='Status')),
                ('paid_at', models.DateTimeField(blank=True, db_index=True, help_text='Datetime when payment was successfully processed.', null=True, verbose_name='Paid at')),
                ('order_price', models.DecimalField(decimal_places=2, help_text='Original order price before discounts and bonuses.', max_digits=10, verbose_name='Order price')),
                ('discount_price', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Total discount price applied (can be calculated: order_price - total_price).', max_digits=10, verbose_name='Discount price')),
                ('total_price', models.DecimalField(decimal_places=2, help_text='Total price after all discounts, bonuses, promo codes (should be the amount to pay).', max_digits=10, verbose_name='Total price')),
                ('amount', models.DecimalField(decimal_places=2, help_text='Amount actually paid by the user (after all adjustments).', max_digits=10, verbose_name='Amount paid')),
                ('bonus_applied', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Bonuses applied to the payment, if any.', max_digits=10, verbose_name='Bonuses applied')),
                ('promo_code', models.CharField(blank=True, default='', help_text='Applied promo code, if any.', max_length=64, verbose_name='Promo code')),
                ('is_recurrent', models.BooleanField(db_index=True, default=False, help_text='True if this payment was initiated as recurring.', verbose_name='Is recurrent')),
                ('provider_response', models.JSONField(blank=True, help_text='Raw response from payment provider.', null=True, verbose_name='Provider response')),
                ('product', models.ForeignKey(help_text='Product purchased with this payment.', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to='products.product', verbose_name='Product')),
                ('recurrent', models.ForeignKey(blank=True, help_text='Linked recurrent subscription if this payment was made automatically.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='payments', to='payments.recurrent', verbose_name='Recurrent')),
                ('user', models.ForeignKey(help_text='User who made this payment.', on_delete=django.db.models.deletion.PROTECT, related_name='payments', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'Payment',
                'verbose_name_plural': 'Payments',
                'ordering': ['-created'],
                'permissions': [('allow_payment_integration', 'Can send requests for payment integration')],
            },
        ),
        migrations.AddIndex(
            model_name='recurrent',
            index=models.Index(fields=['user', 'product', 'status'], name='payments_re_user_id_63c98f_idx'),
        ),
        migrations.AddIndex(
            model_name='recurrent',
            index=models.Index(fields=['charge_token'], name='payments_re_charge__c780ea_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['user', 'product', 'status'], name='payments_pa_user_id_20ed4d_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['external_payment_id'], name='payments_pa_externa_00130d_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['is_recurrent'], name='payments_pa_is_recu_0ea6b4_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['provider', 'status'], name='payments_pa_provide_cc7861_idx'),
        ),
    ]
